<%
/*
  Inserts a link to a CSS entity documentation
  Appropriate styling is applied.

  This template handles CSS data types and CSS functions gracefully by
  automatically adding arrow brackets or round brackets, respectively.

  Parameters:
  $0 - API name to refer to
  $1 - name of the link to display (optional)
  $2 - anchor within the article to jump to of the form '#xyz' (optional)

  Examples:
  {{cssxref("background")}} =>
      <a href="/en-US/docs/Web/CSS/background" title="The background CSS
      property is..."><code>background</code></a>
  {{cssxref("length")}} =>
      <a href="/en-US/docs/Web/CSS/length" title="The <length> CSS data type
      denotes..."><code>&lt;length&gt;</code></a>
  {{cssxref("linear-gradient")}} =>
      <a href="/en-US/docs/Web/CSS/linear-gradient" title="The CSS
      linear-gradient() function creates..."><code>linear-gradient()</code></a>
  {{cssxref("margin-top", "top margin")}} =>
      <a href="/en-US/docs/Web/CSS/margin-top" title="The margin-top CSS
      property of an element sets..."><code>top margin</code></a>
  {{cssxref("filter", "", "#url")}} =>
      <a href="/en-US/docs/Web/CSS/filter#url()"><code>filter</code></a>
*/

var lang = env.locale;
var url = "";
var urlWithoutAnchor = "";
var linkText = ($1 || $0);
var localStrings = string.deserialize(template("L10n:Common"));
var summary = "";

// Deal with CSS data types by removing <>
var slug = $0.replace(/&lt;(.*)&gt;/g, '$1');

// Special case <color> and <position>
switch ($0) {
    case '&lt;color&gt;':
        slug = 'color_value';
        break;

    case '&lt;position&gt;':
        slug = 'position_value';
        break;
}

urlWithoutAnchor = "/" + lang + "/docs/Web/CSS/" + slug;
url = urlWithoutAnchor + $2;

var targetPage = wiki.getPage(urlWithoutAnchor);

// If the link text parameter wasn't included, try to use the
// title of the target page.

if (!$1) {
    if (targetPage && targetPage.title) {
        linkText = kuma.htmlEscape(targetPage.title);
    }

    // If the link text has a space in it, we won't wrap it in
    // <code>, since the text is obviously not an API term.

    if (!linkText.includes(" ")) {
        linkText = "<code>" + linkText + "</code>";
    }
}

// If the page has a summary, grab it for the tooltip; otherwise,
// use the default tooltip string.

if (targetPage.summary) {
    summary = mdn.escapeQuotes(targetPage.summary);
} else {
    summary = mdn.getLocalString(localStrings, "summary");
}

var entry = "<a href=\"" + url + "\"" + (summary?" title=\""+summary+"\"":"") + ">" + linkText + "</a>";


%><%- entry %>
